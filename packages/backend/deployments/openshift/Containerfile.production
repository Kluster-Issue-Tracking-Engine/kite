# Build stage - use go toolset
FROM registry.redhat.io/rhel9/go-toolset@sha256:94ed5700c85822759e23cb1ddfa42f2485a56e709106e7060905588f62c46f22 AS builder

# Metadata
LABEL name="KITE" \
      io.k8s.display-name="Konflux Issues API" \
      com.redhat.component="kite" \
      version="1" \
      io.k8s.description="Konflux Issues API Server" \
      summary="Issue tracking service for Konflux" \
      distribution-scope="private" \
      url="https://github.com/konflux-ci/kite" \
      org.opencontainers.image.source="https://github.com/konflux-ci/kite" \
      io.openshift.expose-services="8080:http" \
      io.openshift.tags="konflux,issues,api,golang,kite" \
      maintainer="CUE Team"

# Root user to install dependencies
USER root
RUN dnf install -y git && dnf clean all

WORKDIR /build

COPY go.mod go.sum ./
# Download dependencies to local cache
RUN go mod download

COPY . .

# Build static binary with maximum optimization
#
# CGO_ENABLED=0: Turn off C-Go integration.
# This allows the app to
# - be a self-contained binary that doesn't need external C libraries
# - work on any linux system
# - be used in a small, portable container
#
# GOOS=linux: sets the target OS (Linux)
#
# -a: Force rebuilds all packages
#
# -ldflags: passes flags to the linker to make smaller binaries
# -s: remove symbol table
# -extldflags 'static': Tell the external linker to make a fully static binary -> no dependencies on shared libraries
#
# -tags: only use parts of the code that are labeled with these tags
# netgo:
# - use the Go implementation of networking (instead of the C-based one).
# - helps create a static binary without relying on system libraries, making it smaller and portable.
#
# osusergo:
# - use the pure Go version of user lookup (instead of the C-based one)
# - helps create a static binary without relying on system libraries, making it smaller and portable.
#
# -mod=mod: Ignore local vendor directory (if any)
RUN CGO_ENABLED=0 GOOS=linux go build \
    -a -ldflags="-s -extldflags '-static'" \
    -tags netgo,osusergo \
    -mod=mod \
    -o server cmd/server/main.go

# Runtime stage - absolute minimal RHEL
FROM registry.redhat.io/ubi9/ubi-micro@sha256:ef76ed20e66a9b19ccbbafe5657d73246c78c8f06ef3161e0fce6831ed4f7352

WORKDIR /opt/app-root/src

# Copy only what's needed
COPY --from=builder /build/server .

COPY scripts/deploy/prod.sh entrypoint.sh

RUN chmod -R g=u . && \
    chmod +x entrypoint.sh

ENV KITE_PROJECT_ENV=production

# Set non-root user
USER 1001

# Openshift convention, use port 8080
EXPOSE 8080

ENTRYPOINT ["./entrypoint.sh"]
